@page "/Administration/Users"
@inject AuthService authService
@inherits ManagementBasePage<User, UserService>
@attribute [Authorize(Roles = Roles.VIEW_USERS)]
<PageTitle>Tablebricks - Users (Management)</PageTitle>

<div class="container">
    <div class="card">
        <div class="card-header">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h2>User Management</h2>
                <AuthorizeView Roles="@(Roles.ADD_USERS)">
                    <Authorized>
                        <button type="button" class="btn" @onclick="NewAsync"><i class="fa-solid fa-square-plus fa-xl"></i></button>
                    </Authorized>
                </AuthorizeView>
            </div>
            <div style="text-align: justify">
                <p>In the User Management, there is an overview of all current users which can be edited or deleted. Moreover, new users can be created.</p>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-3 col-sm-12 order-lg-3">
            <div class="card">
                <div class="card-header">
                    <h4>Filter</h4>
                </div>
                <div class="card-content" style="padding: 0 1.3rem;">
                    <EditForm Model="Filter" OnValidSubmit="async () => await LoadAsync(true)">
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="Filter.SearchPhrase" class="form-control" id="usermanagement-filter-searchphrase" placeholder="Search users" />
                            <label for="usermanagement-filter-searchphrase">Search</label>
                        </div>

                        <div class="toolbar">
                            <button type="submit" class="btn btn-primary">Search</button>
                        </div>

                    </EditForm>
                </div>
            </div>
        </div>
        <div class="col-lg-9 col-sm-12">

            <div class="card p-4">
                <div class="card-content">
                    <!-- Table with no outer spacing -->
                    <div class="table-responsive">
                        <table class="table mb-0 table-lg">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Username</th>
                                    <th class="text-right">Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                <Virtualize Items="Data" Context="user">
                                    <tr>
                                        <td>@user.DisplayName</td>
                                        <td>@user.Username</td>
                                        <td class="text-right">
                                            @if (_loggedInUser?.Id != user.Id)
                                            {
                                                <AuthorizeView Roles="@(Roles.DELETE_USERS)">
                                                    <Authorized>
                                                        <span class="aktion-icon" role="button" @onclick="() => SelectedForDeletion = user">
                                                            <i class="fa-solid fa-trash-can"></i>
                                                        </span>
                                                    </Authorized>
                                                </AuthorizeView>
                                            }
                                            <AuthorizeView Roles="@(Roles.EDIT_USERS)">
                                                <Authorized>
                                                    <span class="aktion-icon" role="button" @onclick="async () => await EditAsync(user)">
                                                        <i class="fa-solid fa-pen-to-square"></i>
                                                    </span>
                                                </Authorized>
                                            </AuthorizeView>
                                        </td>
                                    </tr>
                                </Virtualize>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>





@if (Input is not null)
{
    <Modal Title="@String.Format("Edit user: {0}", Input.DisplayName)"
       OnClosed="() => Input = null"
       ModalSize="ModalSize.LG"
       HideFooter="true">

        <EditForm Model="Input" @ref="_form">
            <FluentValidationValidator />
            <ValidationSummary />
            <div class="row">
                <div class="col-12">
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.Username" class="form-control" id="user-username" placeholder="Username" />
                        <label for="user-username">Username</label>
                        <ValidationMessage For="() => Input.Username" />
                    </div>

                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.DisplayName" class="form-control" id="user-displayname" placeholder="Name" />
                        <label for="user-displayname">Name</label>
                        <ValidationMessage For="() => Input.DisplayName" />
                    </div>

                    <div class="form-floating mb-3">
                        <InputSelect id="user-fraction" @bind-Value="Input.MainFractionId" class="form-control">
                            @foreach (Fraction item in Fractions)
                            {
                                <option value="@item.FractionId">@item.Name</option>
                            }
                        </InputSelect>
                        <label for="user-fraction">Main Fraction</label>
                    </div>

                    @if (Input.UserId is 0)
                    {
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="Input.Password" class="form-control" id="user-password" placeholder="Password" type="password" />
                            <label for="user-password">Password</label>
                            <ValidationMessage For="() => Input.Password" />
                        </div>
                    }



                    <h4>Permissions</h4>

                    @if (_loggedInUser is not null && Input.UserId == _loggedInUser.UserId)
                    {
                        <p>Permissons</p>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-lg">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Description</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var permission in Input.Permissions)
                                    {
                                        <tr>
                                            <td class="text-bold-500">@permission.Name</td>
                                            <td>@permission.Description</td>
                                            <td>
                                                <button type="button" class="btn btn-danger" @onclick="() => Input.Permissions.Remove(permission)">
                                                    <i class="fa-solid fa-trash-can"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }

                                    @if (Input.Permissions.Count != AppdataService.Permissions.Count)
                                    {
                                        <tr>
                                            <td colspan="3">
                                                <div class="input-group">
                                                    <select @onchange="PermissionSelectionChangedAsync" class="form-select" id="inputGroupSelect04" aria-label="Berechtigung">
                                                        @if (SelectedPermission is null)
                                                        {
                                                            <option value="0" selected>Choose</option>
                                                        }
                                                        else
                                                        {
                                                            <option value="0">Choose</option>
                                                        }

                                                        @foreach (var permission in AppdataService.Permissions)
                                                        {
                                                            var userberechtigung = Input.Permissions.FirstOrDefault(x => x.PermissionId == permission.PermissionId);
                                                            @if (userberechtigung is null)
                                                            {
                                                                <option value="@permission.PermissionId">@permission.Name</option>
                                                            }
                                                        }
                                                    </select>

                                                    <button @onclick="AddPermissionAsync" class="btn btn-success" type="button" disabled="@(SelectedPermission is null)">
                                                        <i class="fa-solid fa-plus"></i>
                                                    </button>
                                                </div>
                                            </td>

                                        </tr>
                                    }


                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </EditForm>

        <div class="toolbar">
            <button type="button" class="btn btn-danger" @onclick="() => Input = null">Cancel</button>
            <button type="button" class="btn btn-success" @onclick="SaveAsync">Save</button>
        </div>
    </Modal>
}

@if (SelectedForDeletion is not null)
{
    <ConfirmModal Title="Delete"
              OnClosed="() => SelectedForDeletion = null"
              OnConfirmed="DeleteAsync">
        <p>@String.Format("Should the user '{0}' really be deleted?", SelectedForDeletion.DisplayName)</p>
    </ConfirmModal>
}